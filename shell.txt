int main(int argc, char* argv[])
{
	__asm
	{
		pushad
			SUB ESP, 0x20      
			JMP tag_Shellcode  
			// [tag_Next-0x52] "GetProcAddress"
			_asm _emit(0x47)_asm _emit(0x65)_asm _emit(0x74)_asm _emit(0x50)
		_asm _emit(0x72)_asm _emit(0x6F)_asm _emit(0x63)_asm _emit(0x41)
		_asm _emit(0x64)_asm _emit(0x64)_asm _emit(0x72)_asm _emit(0x65)
		_asm _emit(0x73)_asm _emit(0x73)
		// [tag_Next-0x44] "LoadLibraryExA\0"
		_asm _emit(0x4C)_asm _emit(0x6F)_asm _emit(0x61)_asm _emit(0x64)
		_asm _emit(0x4C)_asm _emit(0x69)_asm _emit(0x62)_asm _emit(0x72)
		_asm _emit(0x61)_asm _emit(0x72)_asm _emit(0x79)_asm _emit(0x45)
		_asm _emit(0x78)_asm _emit(0x41)_asm _emit(0x00)
		// [tag_Next-0x35] "User32.dll\0"
		_asm _emit(0x55)_asm _emit(0x73)_asm _emit(0x65)_asm _emit(0x72)
		_asm _emit(0x33)_asm _emit(0x32)_asm _emit(0x2E)_asm _emit(0x64)
		_asm _emit(0x6C)_asm _emit(0x6C)_asm _emit(0x00)
		// [tag_Next-0x2A] "MessageBoxA\0"
		_asm _emit(0x57)_asm _emit(0x69)_asm _emit(0x6e)_asm _emit(0x45)
		_asm _emit(0x78)_asm _emit(0x65)_asm _emit(0x63)_asm _emit(0x00)
		_asm _emit(0x6F)_asm _emit(0x78)_asm _emit(0x41)_asm _emit(0x00)
		// [tag_Next-0x1E] "ExitProcess\0"
		_asm _emit(0x45)_asm _emit(0x78)_asm _emit(0x69)_asm _emit(0x74)
		_asm _emit(0x50)_asm _emit(0x72)_asm _emit(0x6F)_asm _emit(0x63)
		_asm _emit(0x65)_asm _emit(0x73)_asm _emit(0x73)_asm _emit(0x00)
		// [tag_Next-0x12] "Hello World!\0"
		_asm _emit(0x63)_asm _emit(0x61)_asm _emit(0x6C)_asm _emit(0x63)
		_asm _emit(0x2e)_asm _emit(0x65)_asm _emit(0x78)_asm _emit(0x65)
		_asm _emit(0x00)_asm _emit(0x6C)_asm _emit(0x64)_asm _emit(0x21)
		_asm _emit(0x00)
	tag_Shellcode:
		// 1. GetPC
		CALL tag_Next
		tag_Next :
		pop ebx                    
			mov esi, dword ptr fs : [0x30] 
			mov esi, [esi + 0x0C]          
			mov esi, [esi + 0x1C]          
			mov esi, [esi]               
			mov edx, [esi + 0x08]         
			push ebx                  
			push edx                   
			call fun_GetProcAddress
			mov esi, eax
			lea ecx, [ebx - 0x44]  
			push ecx            
			push edx          
			call eax            
			push ebx      
			push esi           
			push eax            
			push edx            
			call fun_Payload
		fun_GetProcAddress :
		push ebp
			mov ebp, esp
			sub esp, 0x0C
			push edx
			
			mov edx, [ebp + 0x08]  
			mov esi, [edx + 0x3C]  
			lea esi, [edx + esi]   
			mov esi, [esi + 0x78]  
			lea esi, [edx + esi]   
			mov edi, [esi + 0x1C]  
			lea edi, [edx + edi]   
			mov[ebp - 0x04], edi  
			mov edi, [esi + 0x20]  
			lea edi, [edx + edi]   
			mov[ebp - 0x08], edi  
			mov edi, [esi + 0x24]  
			lea edi, [edx + edi]   
			mov[ebp - 0x0C], edi  
			xor eax, eax
			jmp tag_FirstCmp
		tag_CmpFunNameLoop :
		inc eax
		tag_FirstCmp :
		mov esi, [ebp - 0x08]		
			mov esi, [esi + 4 * eax] 
			mov edx, [ebp + 0x08]    
			lea esi, [edx + esi]     
			mov ebx, [ebp + 0x0C]    
			lea edi, [ebx - 0x52]    
			mov ecx, 0x0E			 
			cld
			repe cmpsb
			jne tag_CmpFunNameLoop	
									
			mov esi, [ebp - 0x0C]   
			xor edi, edi
			mov di, [esi + eax * 2] 
									
			mov edx, [ebp - 0x04]   
			mov esi, [edx + edi * 4]
			mov edx, [ebp + 0x08]   
									
			lea eax, [edx + esi]    //getprocaddress
			pop edx
			mov esp, ebp
			pop ebp
			retn 0x08

		fun_Payload: //  (int Kernel32_Base, int LoadLibraryExW, int GetProcAddress, int BaseAddr)
		push ebp
			mov ebp, esp
			sub esp, 0x08
			mov ebx, [ebp + 0x14]  // ebx = Param_4(BaseAddr)
			// get messagebox address
			//lea ecx, [ebx - 0x35] // "User32.dll\0"
			//push 0              // dwFlags       = 0
			//push 0              // hFile         = 0
			//push ecx            // lpLibFileName = "User32.dll"
			//call[ebp + 0x0C]     // LoadLibraryExW()
			lea ecx, [ebx - 0x2A] // "MessageBoxA\0"
			push ecx            // lpProcName = "MessageBoxA"
			push eax            // hModule    = User32.dll
			call[ebp + 0x10]     // GetProcAddress()
			mov[ebp - 0x04], eax
			//  get exitprocess
			lea ecx, [ebx - 0x1E] // "ExitProcess\0"
			push ecx            // lpProcName = "ExitProcess"
			push[ebp + 0x08]     // hModule    = Kernel32.dll
			call[ebp + 0x10]     // GetProcAddress()
			mov[ebp - 0x08], eax
			// Hello World!
			lea ecx, [ebx - 0x12] // "Hello World!\0"
			push 0              // uType     = 0
			push ecx            // lpCaption = "Hello World!\0"
			push ecx            // lpText    = "Hello World!\0"
			push 0              // hWnd      = 0
			call[ebp - 0x04]     // MessageBoxA()
			push 0              // uExitCode = 0
			call[ebp - 0x08]     // ExitProcess()
			mov esp, ebp
			pop ebp
			retn 0x10
	}
	return 0;
}